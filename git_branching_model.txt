A successful Git branching model

Ref:
https://nvie.com/posts/a-successful-git-branching-model/
https://gist.github.com/stuartsaunders/448036/8a76578d0a88ccf3e55cc4efc3200570831eeed2
https://danielkummer.github.io/git-flow-cheatsheet/

Last update: 11/01/2019

1. The main branches
 - master
 - develop
 
We consider origin/master to be the main branch where the source code of HEAD reflected a production-ready state.

We consider origin/develop to be the main branch where the source code of HEAD always reflects a state with the latest deliverd development changes for next release. Some would call this the "integration branch". This is where any automatic nightly builds are built from.

When the source code in the "develop" branch reaches stable point and is ready to be released, all of the changes whould be merged back into master somehow and then tagged with a release number. How this is done in detail will be discussed further on.

Therefore, each time when changes are merged back into master, this is a new prodution release by definition. We tend to be very strict at this, so that theoretically, we could use Git hook script to automatically build and roll-out our software to our production servers everytime there was a commit on master.

2. Supporting branches
Next to the main branches "master" and "develop", our development model uses a variety of supporting branches to aid parallel development between team members, ease tracking of features, prepare for production releases and to assist in quickly fixing live production problems. Unlike the main branches, these branches always have a life time, since they will be removed eventually.

The different types of branches we may use are:
 - feature branch
 - release branches
 - horfix branches
 
Each of these branches have a specific purpose and are bound to strict rules as to which branches may be their originating branch and which branches must be their merge targets. We will walk through them in minute.

By no means are these branches "special" from a technical perspective. The branch types are categorized by how we use them. They are of course plain old Git branches.

a. Feature branches
May branch off from:
 develop
 
Must merge back into:
 develop
 
Branch naming convenstion:
 anything except master, develop, release-*, or hotfix-*
 e.g: feature/feature-name
 
Feature branches (or sometimes called topic branches) are used to develop new features for the upcoming or a distant future release. When starting development of a feature, the target release in which this feature will be incorporated may well be unknown at that point.
The essence of a feature branch is that it exists as long as the feature is in development, but will eventually be merged back into "develop" (to definitely add the new feature to the upcoming release) or discarded (in case of a disappointing experiment).

Feature branches typically exist in developer repos only, not in origin.

*Creating a feature branch*
When starting work on a new feature, branch off from the "develop" branch
$ git checkout -b feature/myfeature develop
Switched to a new branch "feature/myfeature"

*Incorporating a finished feature on develop*
Finished features may be merged into the develop branch to definitely add them to the upcoming release:

---------------------------------------------------
$git checkout develop
Switched to branch 'develop'
$git merge --no-ff feature/myfeature
Updating ea1b82a..05e9557
(Summary of changes)
$git branch -d feature/myfeature
Deleted branch feature/myfeature (was 05e9557)
$git pust origin develop
---------------------------------------------------

Note: The --no-ff (no fast worward) flag causes the merge to always create a new commit object, even if the merge could be performed with a fast-forward. This avoids losing information about the historical existence of feature branch and groups together all commits that together added the feature.
compare.
feature  develop              develop
	 |     |					|
	 |	  ()					()
	 |	  |						|
	 |	  ()					()
	 |	 /|						|
	 |  / |						|
	 | /  |						|
	 ()   |						()
     |    |						|
     ()   |						()
     |    |						|
     ()   |					    ()
     |\   |						|
	 | \  |						|
	    \ |						|
		  ()					|
		  |						|
		  
 git merge --no-ff         git merge
 
In the later case, it is impossible to see from the Git history which of the commit objects together have implemented a feature - you would have to go manually read all the log messages. Reverting a whole feature (i.e a group of commits), is a true headache in the latter situation, whereas it is easily donw if the --no-ff flag was used.

Yes, it will create a few more (empty) commit objects, but the gain is much bigger tha the cost.

b. Release branches
May branch off from:
 develop
 
Must merge back into:
 develop and master
 
Branch naming convention:
 release-*
 
Release branches support preparation of new production release. They allow for last-minute dotting of i's and crossing t's (pay a strictly attention to the detail). Furthermore, they allow for minor bug fixes and preparing meta-data for a release (version number, build dates, etc.). By doing all of this work on a release branch, the "develop" branch is cleared to receive features for the next big release.

The key moment to branch off a new release branch from develop is when develop (almost) refelects the desired state of the new release. At least all features that are targetd for the release-to-be-built must be merged into develop at this point in time. All features targeted at future releases may not--they must wait until after the release branch is branched off.

It is exactly at the start of a release branch that the upcoming release gets assigned a version number--not any earlier. Up until that moment, the "develop" branch relected changes for the "next release", but it is unclear whether that "next release" will eventually become 0.3 or 1.0, until the release branch is started. That decision is made on the start of the release branch and is carried out by the project's rules on version number bumping.

*Create a release branch*
Release branches are created from the "develop" branch. For example, say version 1.1.5 is the current production release and we have a big release coming up. The state of "develop" is ready for the "next release" and we have decied that this will become version 1.2 (rather than 1.1.6 or 2.0). So we branch off and give the release branch a name reflecting the new version number:

---------------------------------------------------
$get checkout -b release-1.2 develop
Switched to a new branch "release-1.2"
$./bum-version.sh 1.2
File modified successfully, version bumped to 1.2.
$git commit -am "Bumped version number to 1.2"
[release-1.2 749424] Bumped version number to 1.2
1 files changes,...
---------------------------------------------------

After creating a new branch and switching to it, we bump the version number. Then the bumped version number is commited.

This new branch may exist for a while, until the release may be roll out definitely. During that time, bug fixes may be applied in this branch (rather than the develop branch). Adding large new features here is strictly prohibited. They must be merged into "develop", and therefore, wait for the next big release.

*Finishing a release branch*
When the state of the release branch is ready to become a real release, some actions need to be carried out. First, the release branch is merged into "master" (since every commit on master is a new release by definition). Next, that commit on "master" must be tagged for easy future reference to this historical version, that version on "master" will be built and roll-out to production. Finally, the changes made on the release branch need to be merged back into "develop", so that future releses also contain these bug fixes.

---------------------------------------------------
$git checkout master
Switched to branch 'master'
$git merge --no-ff release-1.2
Merge made by recursive.
(Summary of changes)
$git tag -a 1.2
---------------------------------------------------

The release is now done, and tagged for future reference.
Note: You might as well want to use the -s or -u <key> flags to sign your tag cryptographically.

To keep the changes made in the release branch, we need to merge back into "develop":

---------------------------------------------------
$git checkout develop
Switched to branch 'develop'
$git merge --no-ff release-1.2
Merge made by recursive.
(Summary of changes)
---------------------------------------------------

This step may well lead to a merge conflict, if so, fix it and commit.
Now we are really done and the release branch may be removed, since we don't need it anymore:

---------------------------------------------------
$git branch -d release-1.2
Deleted branch release-1.2 (was ff452fe).
---------------------------------------------------

c. Hotfixes branches
Patches that need to be made to the most recent production release are applied to a hotfix branch off master. For older releases, hotfixes branch off a support-* branch (explained later.)

May branch off from:
 master

Must merge back into:
 develop and master
 
Branching naming convention:
 hotfix-*
 
Hotfix branches are very much like release branches in that they are also meant to prepeare for a new production release, albeit unplanned. They arised from the necessity to act immidiately upon an undesired state of a live production version must be resolved immediately, a hotfix brnach may be branched off from the corresponding tag on the master branch that marks the production version.

The essence is that work of team members (on the develop branch) can continue, while another person is preparing a quick production fix.

*Creating the hotfix branch*

Hotfix branches are created from the "master" branch. For example, say version 1.2 is the current production release running live and causing troubles due to a severe bug. But changes on "develop" are yet unstable. We may then branch off a hotfix branch and start fixing the problem.

Note: the hotfix branch naming convenstion should include increased master version
e.g: bug found on master version 2.0.0, then hotfix branch should has name "hotfix-2.0.1"

---------------------------------------------------
$git checkout -b hotfix-1.2.1 master
Switched to a new branch "hotfix-1.2.1"
$./bump-version.sh 1.2.1
Files modified successfully, version bumped to 1.2.1.
$git commit -am "Bumped version number to 1.2.1"
[hotfix-1.2.1 41e61bb] Bumped version number to 1.2.1
1 files changed, 1 insertions(+), 1 deletions(-)
---------------------------------------------------

Dont' forget to bump the version number after branching off!
Then, fix the bug and commit the fix in one or more separate commits.

---------------------------------------------------
$git commit -m "Fixed severe production problem"
[hotfix-1.2.1 abbe5d6] Fixed severe production problem
5 files changed, 32 insertions(+), 17 deletions(-)
---------------------------------------------------

*Finishing a hotfix branch*

When finished, the bugfix needs to be merged back into "master", but also to be merged back into "develop", in order to safeguard that the bugfix is included in the next release as well. This is completely similar to how release branches are finished.

First, update master and tag the release.
---------------------------------------------------
$git checkout master
Switched to branch 'master'
$git merge --no-ff hotfix-1.2.1
Merge made by recursive.
(Summary of changes)
$git tag -a 1.2.1
---------------------------------------------------

Next, include the bugfix in develop too only if no release branch currently active,
otherwise merge into release branch instead:
---------------------------------------------------
$git checkout develop
Switched to branch 'develop'
$git merge --no-ff hotfix-1.2.1
Merge made by recursive.
(Summary of changes)
---------------------------------------------------

The one exception to the rule here is that, when a release branch currently exists, the hotfix changes need to be merged into that release branch, instead of develop. Back-mergeing the bugfix into the release branch will eventually result in the bugfix being merged into develop too, when the release branch is finished. (If work in develop immediately requires this bugfix ana cannot wait for the release branch to be finished, you may safely merge the bugfix into develop now already as well.)

Finally, remove the temporary branch:
---------------------------------------------------
$git branch -d hotfix-1.2.1
Deleted branch hotfix-1.2.1 (was abbe5d6).
---------------------------------------------------

d. Hotfix for old release 
If master has moved on a point release (1.0, 1.1, 2.0, 3.0, etc) and a hotfix must be applied to older version (e.g 1.x).
Steps:
 - create a support-1.x branch (if none exists) based on the newest 1.x tag in master
 - create a branch (e.g hotfix-1.1.1), based on support-1.x
 - fix the bug and merge hotfix-1.1.1 back into support-1.x
 - do this for other older major releases as necessary
 
The support branch effectively becomes a master branch for a past version.

3. Other resources
 - using Semantic versioning for version schema definition
 https://semver.org/
 - each release requires generate a corresponding release note
 template: name, date time, branch, new feature, bug fixes, known issues & work around solution
 
4. Git model demo
https://github.com/cuongvm-55/testgitmodel.git

 ---------------------------------------------------
|case1: working with main branches
 --------------------------------------------------- 
 - master branch
 - develope branch off from master
 
 <<Done>>
 
 ---------------------------------------------------
|case2: create feature branch
 --------------------------------------------------- 
 - create feature/newfeature1 branch off from develop
 - implement feature and commit on feature branch
 - merge the work on develop branch
 - delete feature/newfeature1 branch
 
 <<Done>>
 
 ---------------------------------------------------
|case3: release process
 ---------------------------------------------------
 - create release-1.0.0 branch off from develop
 - bump version to 1.0.0
 - commit fixbug for release on release-1.0.0 branch
 - merge release branch to master
 - tag master with release-1.0.0 => master will be build and release to production
 - merge back release branch to develop
 - delete release branch
 
 <<Done>>
 
 ---------------------------------------------------
|case4: hotfix branch - fix bug at latest version
 ---------------------------------------------------
 Assume after roll-out to production, a severe bug happen in version 1.0.0,
 A hotfix is required immediately rather waiting for the next release.
 - create hotfix branch hotfix-1.0.1 from branch master with tag "release-1.0.0"
 - on branch hotfix-1.0.1, bump the version to 1.0.1
 - fix bug and commit on hotfix branch
 - merge hot fix branch to master
 - tag master with release 1.0.1 => master will be build and release to production
 - merge back hotfix branch to develop branch
 - delete hotfix branch
 
 <<Done>>
 
 ---------------------------------------------------
|case5: support branch - fix bug at old version
 ---------------------------------------------------
 Assume master are now at version 1.0.1.
 Prepare:
 - create feature/newfeature2
 - implement and commit on feature/newfeature2
 - merge feature branch to develop branch
 - <<release version 2.0.0>>
 
 Test hot fix on old version:
 Suppose severe bug found in old version 1.0.1 and need hot fix
 - create support-1.0.1 from master at tag release-1.0.1
 - create hotfix-1.0.2 branch from support branch
 - on branch hotfix-1.0.2, bump version to 1.0.2
 - fixbug and commit on hotfix branch
 - merge hotfix branch to support-1.0.1 branch
 - tag support-1.0.1 branch to "hotfix-1.0.2"
 - merge hotfix branch to develop
 - delete hotfix branch
 
 <<Done>>
								--- END ---